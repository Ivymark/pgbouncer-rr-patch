--- ../pgbouncer/src/client.c	2020-04-12 12:53:20.000000000 +0300
+++ ./src/client.c	2020-05-12 22:25:38.000000000 +0300
@@ -1,3 +1,4 @@
+
 /*
  * PgBouncer - Lightweight connection pooler for PostgreSQL.
  *
@@ -630,7 +631,6 @@
 {
 	SBuf *sbuf = &client->sbuf;
 	int rfq_delta = 0;
-
 	switch (pkt->type) {
 
 	/* one-packet queries */
@@ -649,6 +649,7 @@
 	/* request immediate response from server */
 	case 'S':		/* Sync */
 		rfq_delta++;
+		slog_info(client, "DBEELINE - Client just synced");
 		break;
 	case 'H':		/* Flush */
 		break;
@@ -695,6 +696,27 @@
 	if (client->pool->db->admin)
 		return admin_handle_client(client, pkt);
 
+	/* pgbouncer-rr extensions: query rewrite & client connection routing */
+	if(client->link && client->link->idle_tx) {
+		slog_info(client, "SKIPPING ROUTING RULES: client is transacting");
+		slog_info(client, "DBEELINE - current last tx time is %d", client->last_tx_timestamp);
+		client->last_tx_timestamp = time(NULL);
+		slog_info(client, "DBEELINE - client last tx time is now set to %d", client->last_tx_timestamp);
+		return skip_query_interception(client, pkt, sbuf, rfq_delta);
+	}
+	
+	if (pkt->type == 'Q' || pkt->type == 'P') {
+		if((long)client->last_tx_timestamp > 0 && (long)time(NULL) - (long)client->last_tx_timestamp > 60) {
+			slog_info(client, "Client transacted, sticking to master");
+			return skip_query_interception(client, pkt, sbuf, rfq_delta);
+		}
+		slog_info(client, "Client aligable for routing");
+		if (!rewrite_query(client, pkt)) {
+			return false;
+		}
+        route_client_connection(client, pkt);
+	}
+
 	/* acquire server */
 	if (!find_server(client))
 		return false;
